paste(round(c(Psi),2), collapse = ", ")
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
library("mvordflex")
data("data_toy_mvordflex", package = "mvordflex")
q <- 3 # number of multiple measurements
TT <- 5 # number of years
# Note that the number of responses is q*TT
## Probit
res<- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
traceback()
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
# Note that the number of responses is q*TT
res_ar1 <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_ar1(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
# Note that the number of responses is q*TT
res_ar1 <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_ar1(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
psi <- diag(z2r(rep(0, ndim_j)))
ar_blocks <- lapply(0:(ndim_t - 1), function(t) {
s_ar <- if (t == 0) diag(ndim_j) else psi ^ t
crossprod(s_ar, sigma)
})
psi <- diag(mvordflex:::z2r(rep(0, ndim_j)))
ndim_j<-3
psi <- diag(mvordflex:::z2r(rep(0, ndim_j)))
psi
ar_blocks <- lapply(0:(ndim_t - 1), function(t) {
s_ar <- if (t == 0) diag(ndim_j) else psi ^ t
crossprod(s_ar, sigma)
})
ndim_t<-5
ar_blocks <- lapply(0:(ndim_t - 1), function(t) {
s_ar <- if (t == 0) diag(ndim_j) else psi ^ t
crossprod(s_ar, sigma)
})
psi <- diag(z2r(rep(0, ndim_j)))
ar_blocks <- lapply(0:(ndim_t - 1), function(t) {
s_ar <- if (t == 0) diag(ndim_j) else psi ^ t
crossprod(s_ar, sigma)
})
library(mvordflex)
# Note that the number of responses is q*TT
res_cross <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3_cross(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
library(mvordflex)
library(mvordflex)
library(mvordflex)
library("mvordflex")
data("data_toy_mvordflex", package = "mvordflex")
q <- 3 # number of multiple measurements
TT <- 5 # number of years
# Note that the number of responses is q*TT
## Probit
res<- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT), PL.lag = 1)
source("~/GitHub/mvordflex/tests/check_toy_mvordflex.R")
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
#PL.lag = 2,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "bobyqa",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
#     cos1 <- cos(theta);
#     sin1 <- sin(theta);
#     Qi_tmp <- cos1 * Q[,i] - sin1 * Q[,j];
#     Qj_tmp <- sin1 * Q[,i] + cos1 * Q[,j];
#     Q[, i] <- Qi_tmp;
#     Q[, j] <- Qj_tmp;
#     index <- index + 1;
#   }
#   #index <- 1;
# }
ind <- combn(m, 2)
Q <- diag(m)
for (k in ncol(ind)){
i <- ind[1, k]
j <- ind[2, k]
theta <-  ifelse(i == 1, 2, 1) * pi * (1 - exp(s[k]))/(1 + exp(s[k]))
Gk <- diag(m)
Gk[i, i] <- Gk[j, j] <- cos(theta)
Gk[i, j] <- sin(theta)
Gk[j, i] <- - sin(theta)
Q <- Q %*% Gk
}
Q
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "bobyqa",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,fevals=1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 1000,
eval.max= 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 1000,
eval.max= 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 2000,
eval.max= 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "newuoa",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
summary(res)
tpar<-res$rho$optpar[-(1:(7+2+3))]
tpar
## Works for now only for symmetric Psi
m <- sqrt(length(tpar)) # this is ndim_j
l <- tpar[seq_len(m * (m - 1)/2)]                     ## cholesky of V positive definite
d <- tpar[m * (m - 1)/2 + seq_len(m)]                 ## diag V positive definite
s <- tpar[m * (m - 1)/2 + m + seq_len(m * (m - 1)/2)] ## Q orthogonal
## Transformations
### For V - positive definite: LDL'
# L <- diag(m)
# L[lower.tri(L)] <- l
# diag(L) <- exp(d)
# V <- tcrossprod(L)
logV <- matrix(0, nrow = m, ncol = m)
logV[upper.tri(logV)] <- l
logV <- logV + t(logV)
diag(logV) <- d
e <- eigen(logV)
U <- e$vectors
loglambda <- e$values
V <- U %*% diag(exp(loglambda)) %*% t(U)
### For Q - orthogonal - for now not working
S <- matrix(0, nrow = m, ncol = m) # skew symmetric S' = -S
#S <- diag(m)
S[lower.tri(S)] <- s
S <- S - t(S)
Im <- diag(m)
#     cos1 <- cos(theta);
#     sin1 <- sin(theta);
#     Qi_tmp <- cos1 * Q[,i] - sin1 * Q[,j];
#     Qj_tmp <- sin1 * Q[,i] + cos1 * Q[,j];
#     Q[, i] <- Qi_tmp;
#     Q[, j] <- Qj_tmp;
#     index <- index + 1;
#   }
#   #index <- 1;
# }
ind <- combn(m, 2)
Q <- diag(m)
for (k in 1:ncol(ind)){
i <- ind[1, k]
j <- ind[2, k]
theta <-  ifelse(i == 1, 2, 1) * pi * (1 - exp(s[k]))/(1 + exp(s[k]))
Gk <- diag(m)
Gk[i, i] <- Gk[j, j] <- cos(theta)
Gk[i, j] <- sin(theta)
Gk[j, i] <- - sin(theta)
Q <- Q %*% Gk
}
#Q <- PL.Q(Im, S)
#Q <-  diag(c(1, 1,-1)) %*% (Im - S) %*% solve(Im + S)
#Q <- solve(Im - S, Im + S)
Q <- Im#(Im - S) %*% solve(Im+S)
### make matrix A = V^{1/2}Q(V + M)^{-1/2}, M-fixed
Vhalf <- U %*% diag(exp(loglambda/2)) %*% t(U) #
psi   <- Vhalf %*% Q %*% sqrootmat(chol2inv(chol(V + Im)))
psi
sqrootmat  <- function(M) {
e <- eigen(M)
e$vectors %*% diag(sqrt(e$values)) %*% t(e$vectors)
}
psi
### make matrix A = V^{1/2}Q(V + M)^{-1/2}, M-fixed
Vhalf <- U %*% diag(exp(loglambda/2)) %*% t(U) #
psi   <- Vhalf %*% Q %*% sqrootmat(chol2inv(chol(V + Im)))
psi
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
library(mvordflex)
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
library(mvordflex)
## Probit
res <- mvordflex(
formula = MMO3(response, firm_id, year_id, outcome_id) ~ 0 + X1 + X2,
data = data_toy_mvordflex,
error.structure = cor_MMO3(~1, Psi.diag = FALSE),
coef.constraints = rep(1, q * TT),
threshold.constraints = rep(1:q, TT),
PL.lag = 1,
control = mvord::mvord.control(se = FALSE,
solver = "nlminb",
solver.optimx.control = list(maxit = 5000,
eval.max= 1000,
trace = 1)))
